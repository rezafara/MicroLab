
AVRASM ver. 2.1.30  C:\Projects\Micro Proccessor LAB\E5\ALCD\2\List\lcd2.asm Fri Apr 15 20:38:16 2016

C:\Projects\Micro Proccessor LAB\E5\ALCD\2\List\lcd2.asm(1073): warning: Register r5 already defined by the .DEF directive
C:\Projects\Micro Proccessor LAB\E5\ALCD\2\List\lcd2.asm(1074): warning: Register r4 already defined by the .DEF directive
C:\Projects\Micro Proccessor LAB\E5\ALCD\2\List\lcd2.asm(1075): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega64
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega64
                 	#pragma AVRPART MEMORY PROG_FLASH 65536
                 	#pragma AVRPART MEMORY EEPROM 2048
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0054 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x2040003:
00004f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000050 0002      	.DW  0x02
000051 0500      	.DW  __base_y_G102
000052 009e      	.DW  _0x2040003*2
                 
                 _0xFFFFFFFF:
000053 0000      	.DW  0
                 
                 __RESET:
000054 94f8      	CLI
000055 27ee      	CLR  R30
000056 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000057 e0f1      	LDI  R31,1
000058 bff5      	OUT  MCUCR,R31
000059 bfe5      	OUT  MCUCR,R30
00005a 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00005c e1f8      	LDI  R31,0x18
00005d bdf1      	OUT  WDTCR,R31
00005e bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00005f e08d      	LDI  R24,(14-2)+1
000060 e0a2      	LDI  R26,2
000061 27bb      	CLR  R27
                 __CLEAR_REG:
000062 93ed      	ST   X+,R30
000063 958a      	DEC  R24
000064 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000065 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000066 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000067 e0a0      	LDI  R26,LOW(__SRAM_START)
000068 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000069 93ed      	ST   X+,R30
00006a 9701      	SBIW R24,1
00006b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006c eae0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006e 9185      	LPM  R24,Z+
00006f 9195      	LPM  R25,Z+
000070 9700      	SBIW R24,0
000071 f061      	BREQ __GLOBAL_INI_END
000072 91a5      	LPM  R26,Z+
000073 91b5      	LPM  R27,Z+
000074 9005      	LPM  R0,Z+
000075 9015      	LPM  R1,Z+
000076 01bf      	MOVW R22,R30
000077 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000078 9005      	LPM  R0,Z+
000079 920d      	ST   X+,R0
00007a 9701      	SBIW R24,1
00007b f7e1      	BRNE __GLOBAL_INI_LOOP
00007c 01fb      	MOVW R30,R22
00007d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007e efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007f bfed      	OUT  SPL,R30
000080 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000081 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000082 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000083 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000084 940c 00cc 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega64.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;//int debounce1(int index){
                 ;int debounce1(){
                 ; 0000 000A int debounce1(){
                 
                 	.CSEG
                 _debounce1:
                 ; 0000 000B     int i = 0;
                 ; 0000 000C     for(i = 0; i < 2;i++){
000086 940e 0190 	CALL SUBOPT_0x0
                 ;	i -> R16,R17
                 _0x4:
                +
000088 3002     +CPI R16 , LOW ( 2 )
000089 e0e0     +LDI R30 , HIGH ( 2 )
00008a 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00008b f4ac      	BRGE _0x5
                 ; 0000 000D         if((PINA & 0x01) == 0x01){
00008c b3e9      	IN   R30,0x19
00008d 70e1      	ANDI R30,LOW(0x1)
00008e 30e1      	CPI  R30,LOW(0x1)
00008f f449      	BRNE _0x6
                 ; 0000 000E             if (i == 2){
000090 e0e2      	LDI  R30,LOW(2)
000091 e0f0      	LDI  R31,HIGH(2)
000092 17e0      	CP   R30,R16
000093 07f1      	CPC  R31,R17
000094 f419      	BRNE _0x7
                 ; 0000 000F                 return 1;
000095 e0e1      	LDI  R30,LOW(1)
000096 e0f0      	LDI  R31,HIGH(1)
000097 c025      	RJMP _0x2080004
                 ; 0000 0010             }
                 ; 0000 0011         }
                 _0x7:
                 ; 0000 0012         else{
000098 c003      	RJMP _0x8
                 _0x6:
                 ; 0000 0013             return 0;
000099 e0e0      	LDI  R30,LOW(0)
00009a e0f0      	LDI  R31,HIGH(0)
00009b c021      	RJMP _0x2080004
                 ; 0000 0014         }
                 _0x8:
                 ; 0000 0015         delay_ms(40);
00009c 940e 0197 	CALL SUBOPT_0x1
                 ; 0000 0016     }
                +
00009e 5f0f     +SUBI R16 , LOW ( - 1 )
00009f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000a0 cfe7      	RJMP _0x4
                 _0x5:
                 ; 0000 0017 }
0000a1 c01b      	RJMP _0x2080004
                 ;
                 ;int debounce2(){
                 ; 0000 0019 int debounce2(){
                 _debounce2:
                 ; 0000 001A     int i = 0;
                 ; 0000 001B     for(i = 0; i < 2;i++){
0000a2 940e 0190 	CALL SUBOPT_0x0
                 ;	i -> R16,R17
                 _0xA:
                +
0000a4 3002     +CPI R16 , LOW ( 2 )
0000a5 e0e0     +LDI R30 , HIGH ( 2 )
0000a6 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0000a7 f4ac      	BRGE _0xB
                 ; 0000 001C         if((PINA & 0x02) == 0x02){
0000a8 b3e9      	IN   R30,0x19
0000a9 70e2      	ANDI R30,LOW(0x2)
0000aa 30e2      	CPI  R30,LOW(0x2)
0000ab f449      	BRNE _0xC
                 ; 0000 001D             if (i == 2){
0000ac e0e2      	LDI  R30,LOW(2)
0000ad e0f0      	LDI  R31,HIGH(2)
0000ae 17e0      	CP   R30,R16
0000af 07f1      	CPC  R31,R17
0000b0 f419      	BRNE _0xD
                 ; 0000 001E                 return 1;
0000b1 e0e1      	LDI  R30,LOW(1)
0000b2 e0f0      	LDI  R31,HIGH(1)
0000b3 c009      	RJMP _0x2080004
                 ; 0000 001F             }
                 ; 0000 0020         }
                 _0xD:
                 ; 0000 0021         else{
0000b4 c003      	RJMP _0xE
                 _0xC:
                 ; 0000 0022             return 0;
0000b5 e0e0      	LDI  R30,LOW(0)
0000b6 e0f0      	LDI  R31,HIGH(0)
0000b7 c005      	RJMP _0x2080004
                 ; 0000 0023         }
                 _0xE:
                 ; 0000 0024         delay_ms(40);
0000b8 940e 0197 	CALL SUBOPT_0x1
                 ; 0000 0025     }
                +
0000ba 5f0f     +SUBI R16 , LOW ( - 1 )
0000bb 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000bc cfe7      	RJMP _0xA
                 _0xB:
                 ; 0000 0026 }
                 _0x2080004:
0000bd 9109      	LD   R16,Y+
0000be 9119      	LD   R17,Y+
0000bf 9508      	RET
                 ;
                 ;int checkToggled1()
                 ; 0000 0029 {
                 _checkToggled1:
                 ; 0000 002A     if((PINA & 0x01) == 0)
0000c0 9bc8      	SBIS 0x19,0
                 ; 0000 002B         return 1;
0000c1 c003      	RJMP _0x2080003
                 ; 0000 002C     else
                 ; 0000 002D         return 0;
0000c2 c005      	RJMP _0x2080002
                 ; 0000 002E }
                 ;
                 ;int checkToggled2()
                 ; 0000 0031 {
                 _checkToggled2:
                 ; 0000 0032     if((PINA & 0x02) == 0)
0000c3 99c9      	SBIC 0x19,1
0000c4 c003      	RJMP _0x11
                 ; 0000 0033         return 1;
                 _0x2080003:
0000c5 e0e1      	LDI  R30,LOW(1)
0000c6 e0f0      	LDI  R31,HIGH(1)
0000c7 9508      	RET
                 ; 0000 0034     else
                 _0x11:
                 ; 0000 0035         return 0;
                 _0x2080002:
0000c8 e0e0      	LDI  R30,LOW(0)
0000c9 e0f0      	LDI  R31,HIGH(0)
0000ca 9508      	RET
                 ; 0000 0036 }
0000cb 9508      	RET
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 003A {
                 _main:
                 ; 0000 003B // Declare your local variables here
                 ; 0000 003C     int counter=0;
                 ; 0000 003D     char counterChar;
                 ; 0000 003E     //string printStr = "0";
                 ; 0000 003F // Input/Output Ports initialization
                 ; 0000 0040 // Port A initialization
                 ; 0000 0041 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0042 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0043 PORTA=0x00;
                 ;	counter -> R16,R17
                 ;	counterChar -> R19
                +
0000cc e000     +LDI R16 , LOW ( 0 )
0000cd e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0000ce e0e0      	LDI  R30,LOW(0)
0000cf bbeb      	OUT  0x1B,R30
                 ; 0000 0044 DDRA=0x00;
0000d0 bbea      	OUT  0x1A,R30
                 ; 0000 0045 
                 ; 0000 0046 // Port B initialization
                 ; 0000 0047 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0048 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0049 PORTB=0x00;
0000d1 bbe8      	OUT  0x18,R30
                 ; 0000 004A DDRB=0x00;
0000d2 bbe7      	OUT  0x17,R30
                 ; 0000 004B 
                 ; 0000 004C // Port C initialization
                 ; 0000 004D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 004E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 004F PORTC=0x00;
0000d3 bbe5      	OUT  0x15,R30
                 ; 0000 0050 DDRC=0x00;
0000d4 bbe4      	OUT  0x14,R30
                 ; 0000 0051 
                 ; 0000 0052 // Port D initialization
                 ; 0000 0053 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0054 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0055 PORTD=0x00;
0000d5 bbe2      	OUT  0x12,R30
                 ; 0000 0056 DDRD=0x00;
0000d6 bbe1      	OUT  0x11,R30
                 ; 0000 0057 
                 ; 0000 0058 // Port E initialization
                 ; 0000 0059 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 005A // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 005B PORTE=0x00;
0000d7 b9e3      	OUT  0x3,R30
                 ; 0000 005C DDRE=0x00;
0000d8 b9e2      	OUT  0x2,R30
                 ; 0000 005D 
                 ; 0000 005E // Port F initialization
                 ; 0000 005F // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0060 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0061 PORTF=0x00;
0000d9 93e0 0062 	STS  98,R30
                 ; 0000 0062 DDRF=0x00;
0000db 93e0 0061 	STS  97,R30
                 ; 0000 0063 
                 ; 0000 0064 // Port G initialization
                 ; 0000 0065 // Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0066 // State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0067 PORTG=0x00;
0000dd 93e0 0065 	STS  101,R30
                 ; 0000 0068 DDRG=0x00;
0000df 93e0 0064 	STS  100,R30
                 ; 0000 0069 
                 ; 0000 006A // Alphanumeric LCD initialization
                 ; 0000 006B // Connections are specified in the
                 ; 0000 006C // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 006D // RS - PORTC Bit 0
                 ; 0000 006E // RD - PORTC Bit 1
                 ; 0000 006F // EN - PORTC Bit 2
                 ; 0000 0070 // D4 - PORTC Bit 4
                 ; 0000 0071 // D5 - PORTC Bit 5
                 ; 0000 0072 // D6 - PORTC Bit 6
                 ; 0000 0073 // D7 - PORTC Bit 7
                 ; 0000 0074 // Characters/line: 20
                 ; 0000 0075 lcd_init(20);
0000e1 e1a4      	LDI  R26,LOW(20)
0000e2 940e 0162 	CALL _lcd_init
                 ; 0000 0076 
                 ; 0000 0077 while (1)
                 _0x13:
                 ; 0000 0078       {
                 ; 0000 0079       // Place your code here
                 ; 0000 007A           if(debounce1() == 1){
0000e4 dfa1      	RCALL _debounce1
0000e5 30e1      	CPI  R30,LOW(0x1)
0000e6 e0a0      	LDI  R26,HIGH(0x1)
0000e7 07fa      	CPC  R31,R26
0000e8 f479      	BRNE _0x16
                 ; 0000 007B             delay_ms(5);
0000e9 940e 019b 	CALL SUBOPT_0x2
                 ; 0000 007C             if (checkToggled1() == 1){
0000eb dfd4      	RCALL _checkToggled1
0000ec 30e1      	CPI  R30,LOW(0x1)
0000ed e0a0      	LDI  R26,HIGH(0x1)
0000ee 07fa      	CPC  R31,R26
0000ef f441      	BRNE _0x17
                 ; 0000 007D               counter++;
                +
0000f0 5f0f     +SUBI R16 , LOW ( - 1 )
0000f1 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 007E               if (counter > 9) {
                +
0000f2 300a     +CPI R16 , LOW ( 10 )
0000f3 e0e0     +LDI R30 , HIGH ( 10 )
0000f4 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
0000f5 f014      	BRLT _0x18
                 ; 0000 007F               counter=0;
                +
0000f6 e000     +LDI R16 , LOW ( 0 )
0000f7 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0080               }
                 ; 0000 0081               }
                 _0x18:
                 ; 0000 0082             }
                 _0x17:
                 ; 0000 0083       if(debounce2() == 1){
                 _0x16:
0000f8 dfa9      	RCALL _debounce2
0000f9 30e1      	CPI  R30,LOW(0x1)
0000fa e0a0      	LDI  R26,HIGH(0x1)
0000fb 07fa      	CPC  R31,R26
0000fc f469      	BRNE _0x19
                 ; 0000 0084         delay_ms(5);
0000fd 940e 019b 	CALL SUBOPT_0x2
                 ; 0000 0085         if (checkToggled2() == 1){
0000ff dfc3      	RCALL _checkToggled2
000100 30e1      	CPI  R30,LOW(0x1)
000101 e0a0      	LDI  R26,HIGH(0x1)
000102 07fa      	CPC  R31,R26
000103 f431      	BRNE _0x1A
                 ; 0000 0086           counter--;
                +
000104 5001     +SUBI R16 , LOW ( 1 )
000105 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 ; 0000 0087           if (counter < 0) {
000106 2311      	TST  R17
000107 f412      	BRPL _0x1B
                 ; 0000 0088           counter=9;
                +
000108 e009     +LDI R16 , LOW ( 9 )
000109 e010     +LDI R17 , HIGH ( 9 )
                 	__GETWRN 16,17,9
                 ; 0000 0089               }
                 ; 0000 008A         }
                 _0x1B:
                 ; 0000 008B         }
                 _0x1A:
                 ; 0000 008C         lcd_gotoxy(0,0);
                 _0x19:
00010a e0e0      	LDI  R30,LOW(0)
00010b 93ea      	ST   -Y,R30
00010c e0a0      	LDI  R26,LOW(0)
00010d 940e 0135 	CALL _lcd_gotoxy
                 ; 0000 008D         lcd_putchar(counter + 48);
00010f 2fa0      	MOV  R26,R16
000110 5da0      	SUBI R26,-LOW(48)
000111 940e 014e 	CALL _lcd_putchar
                 ; 0000 008E        }
000113 cfd0      	RJMP _0x13
                 ; 0000 008F 
                 ; 0000 0090 }
                 _0x1C:
000114 cfff      	RJMP _0x1C
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G102:
000115 93aa      	ST   -Y,R26
000116 b3e5      	IN   R30,0x15
000117 70ef      	ANDI R30,LOW(0xF)
000118 2fae      	MOV  R26,R30
000119 81e8      	LD   R30,Y
00011a 7fe0      	ANDI R30,LOW(0xF0)
00011b 2bea      	OR   R30,R26
00011c bbe5      	OUT  0x15,R30
                +
00011d e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
00011e 958a     +DEC R24
00011f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
000120 9aaa      	SBI  0x15,2
                +
000121 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000122 958a     +DEC R24
000123 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000124 98aa      	CBI  0x15,2
                +
000125 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000126 958a     +DEC R24
000127 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000128 c065      	RJMP _0x2080001
                 __lcd_write_data:
000129 93aa      	ST   -Y,R26
00012a 81a8      	LD   R26,Y
00012b dfe9      	RCALL __lcd_write_nibble_G102
00012c 81e8          ld    r30,y
00012d 95e2          swap  r30
00012e 83e8          st    y,r30
00012f 81a8      	LD   R26,Y
000130 dfe4      	RCALL __lcd_write_nibble_G102
                +
000131 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000132 958a     +DEC R24
000133 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000134 c059      	RJMP _0x2080001
                 _lcd_gotoxy:
000135 93aa      	ST   -Y,R26
000136 81e8      	LD   R30,Y
000137 e0f0      	LDI  R31,0
000138 50e0      	SUBI R30,LOW(-__base_y_G102)
000139 4ffb      	SBCI R31,HIGH(-__base_y_G102)
00013a 81e0      	LD   R30,Z
00013b 81a9      	LDD  R26,Y+1
00013c 0fae      	ADD  R26,R30
00013d dfeb      	RCALL __lcd_write_data
00013e 8059      	LDD  R5,Y+1
00013f 8048      	LDD  R4,Y+0
000140 9622      	ADIW R28,2
000141 9508      	RET
                 _lcd_clear:
000142 e0a2      	LDI  R26,LOW(2)
000143 940e 019f 	CALL SUBOPT_0x3
000145 e0ac      	LDI  R26,LOW(12)
000146 dfe2      	RCALL __lcd_write_data
000147 e0a1      	LDI  R26,LOW(1)
000148 940e 019f 	CALL SUBOPT_0x3
00014a e0e0      	LDI  R30,LOW(0)
00014b 2e4e      	MOV  R4,R30
00014c 2e5e      	MOV  R5,R30
00014d 9508      	RET
                 _lcd_putchar:
00014e 93aa      	ST   -Y,R26
00014f 81a8      	LD   R26,Y
000150 30aa      	CPI  R26,LOW(0xA)
000151 f011      	BREQ _0x2040005
000152 1457      	CP   R5,R7
000153 f040      	BRLO _0x2040004
                 _0x2040005:
000154 e0e0      	LDI  R30,LOW(0)
000155 93ea      	ST   -Y,R30
000156 9443      	INC  R4
000157 2da4      	MOV  R26,R4
000158 dfdc      	RCALL _lcd_gotoxy
000159 81a8      	LD   R26,Y
00015a 30aa      	CPI  R26,LOW(0xA)
00015b f191      	BREQ _0x2080001
                 _0x2040004:
00015c 9453      	INC  R5
00015d 9aa8      	SBI  0x15,0
00015e 81a8      	LD   R26,Y
00015f dfc9      	RCALL __lcd_write_data
000160 98a8      	CBI  0x15,0
000161 c02c      	RJMP _0x2080001
                 _lcd_init:
000162 93aa      	ST   -Y,R26
000163 b3e4      	IN   R30,0x14
000164 6fe0      	ORI  R30,LOW(0xF0)
000165 bbe4      	OUT  0x14,R30
000166 9aa2      	SBI  0x14,2
000167 9aa0      	SBI  0x14,0
000168 9aa1      	SBI  0x14,1
000169 98aa      	CBI  0x15,2
00016a 98a8      	CBI  0x15,0
00016b 98a9      	CBI  0x15,1
00016c 8078      	LDD  R7,Y+0
00016d 81e8      	LD   R30,Y
00016e 58e0      	SUBI R30,-LOW(128)
                +
00016f 93e0 0502+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
000171 81e8      	LD   R30,Y
000172 54e0      	SUBI R30,-LOW(192)
                +
000173 93e0 0503+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
000175 e1a4      	LDI  R26,LOW(20)
000176 e0b0      	LDI  R27,0
000177 940e 01ad 	CALL _delay_ms
000179 940e 01a5 	CALL SUBOPT_0x4
00017b 940e 01a5 	CALL SUBOPT_0x4
00017d 940e 01a5 	CALL SUBOPT_0x4
00017f e2a0      	LDI  R26,LOW(32)
000180 df94      	RCALL __lcd_write_nibble_G102
                +
000181 ec88     +LDI R24 , LOW ( 200 )
000182 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000183 9701     +SBIW R24 , 1
000184 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000185 e2a8      	LDI  R26,LOW(40)
000186 dfa2      	RCALL __lcd_write_data
000187 e0a4      	LDI  R26,LOW(4)
000188 dfa0      	RCALL __lcd_write_data
000189 e8a5      	LDI  R26,LOW(133)
00018a df9e      	RCALL __lcd_write_data
00018b e0a6      	LDI  R26,LOW(6)
00018c df9c      	RCALL __lcd_write_data
00018d dfb4      	RCALL _lcd_clear
                 _0x2080001:
00018e 9621      	ADIW R28,1
00018f 9508      	RET
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G102:
000500           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000190 931a      	ST   -Y,R17
000191 930a      	ST   -Y,R16
                +
000192 e000     +LDI R16 , LOW ( 0 )
000193 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000194 e000     +LDI R16 , LOW ( 0 )
000195 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000196 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000197 e2a8      	LDI  R26,LOW(40)
000198 e0b0      	LDI  R27,0
000199 940c 01ad 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00019b e0a5      	LDI  R26,LOW(5)
00019c e0b0      	LDI  R27,0
00019d 940c 01ad 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
00019f 940e 0129 	CALL __lcd_write_data
0001a1 e0a3      	LDI  R26,LOW(3)
0001a2 e0b0      	LDI  R27,0
0001a3 940c 01ad 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
0001a5 e3a0      	LDI  R26,LOW(48)
0001a6 940e 0115 	CALL __lcd_write_nibble_G102
                +
0001a8 ec88     +LDI R24 , LOW ( 200 )
0001a9 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001aa 9701     +SBIW R24 , 1
0001ab f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001ac 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001ad 9610      	adiw r26,0
0001ae f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001af ed80     +LDI R24 , LOW ( 0x7D0 )
0001b0 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001b1 9701     +SBIW R24 , 1
0001b2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001b3 95a8      	wdr
0001b4 9711      	sbiw r26,1
0001b5 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001b6 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega64 register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  17 r17:  17 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  21 r25:   5 r26:  47 r27:   7 r28:   3 r29:   1 r30:  86 r31:  21 
x  :   3 y  :  26 z  :   8 
Registers used: 19 out of 35 (54.3%)

ATmega64 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   3 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   1 brmi  :   0 brne  :  19 brpl  :   1 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  17 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   3 cpc   :   9 cpi   :  11 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   2 jmp   :  39 ld    :  13 ldd   :   4 ldi   :  81 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   5 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   1 out   :  19 pop   :   0 push  :   0 rcall :  16 ret   :  10 
reti  :   0 rjmp  :  18 rol   :   0 ror   :   0 sbc   :   0 sbci  :   5 
sbi   :   5 sbic  :   1 sbis  :   1 sbiw  :   7 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  13 std   :   0 sts   :   7 sub   :   0 subi  :   8 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 43 out of 116 (37.1%)

ATmega64 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00036e    850     28    878   65536   1.3%
[.dseg] 0x000100 0x000504      0      4      4    4351   0.1%
[.eseg] 0x000000 0x000000      0      0      0    2048   0.0%

Assembly complete, 0 errors, 3 warnings
